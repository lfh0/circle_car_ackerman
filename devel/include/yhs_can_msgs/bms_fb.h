// Generated by gencpp from file yhs_can_msgs/bms_fb.msg
// DO NOT EDIT!


#ifndef YHS_CAN_MSGS_MESSAGE_BMS_FB_H
#define YHS_CAN_MSGS_MESSAGE_BMS_FB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yhs_can_msgs
{
template <class ContainerAllocator>
struct bms_fb_
{
  typedef bms_fb_<ContainerAllocator> Type;

  bms_fb_()
    : bms_fb_voltage(0.0)
    , bms_fb_current(0.0)
    , bms_fb_remaining_capacity(0.0)  {
    }
  bms_fb_(const ContainerAllocator& _alloc)
    : bms_fb_voltage(0.0)
    , bms_fb_current(0.0)
    , bms_fb_remaining_capacity(0.0)  {
  (void)_alloc;
    }



   typedef float _bms_fb_voltage_type;
  _bms_fb_voltage_type bms_fb_voltage;

   typedef float _bms_fb_current_type;
  _bms_fb_current_type bms_fb_current;

   typedef float _bms_fb_remaining_capacity_type;
  _bms_fb_remaining_capacity_type bms_fb_remaining_capacity;





  typedef boost::shared_ptr< ::yhs_can_msgs::bms_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yhs_can_msgs::bms_fb_<ContainerAllocator> const> ConstPtr;

}; // struct bms_fb_

typedef ::yhs_can_msgs::bms_fb_<std::allocator<void> > bms_fb;

typedef boost::shared_ptr< ::yhs_can_msgs::bms_fb > bms_fbPtr;
typedef boost::shared_ptr< ::yhs_can_msgs::bms_fb const> bms_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yhs_can_msgs::bms_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yhs_can_msgs::bms_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::bms_fb_<ContainerAllocator2> & rhs)
{
  return lhs.bms_fb_voltage == rhs.bms_fb_voltage &&
    lhs.bms_fb_current == rhs.bms_fb_current &&
    lhs.bms_fb_remaining_capacity == rhs.bms_fb_remaining_capacity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yhs_can_msgs::bms_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::bms_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yhs_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::bms_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::bms_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::bms_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "931076749ca0fa82fb86cdb07acbd6a3";
  }

  static const char* value(const ::yhs_can_msgs::bms_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x931076749ca0fa82ULL;
  static const uint64_t static_value2 = 0xfb86cdb07acbd6a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yhs_can_msgs/bms_fb";
  }

  static const char* value(const ::yhs_can_msgs::bms_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 bms_fb_voltage\n"
"float32 bms_fb_current\n"
"float32 bms_fb_remaining_capacity\n"
;
  }

  static const char* value(const ::yhs_can_msgs::bms_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bms_fb_voltage);
      stream.next(m.bms_fb_current);
      stream.next(m.bms_fb_remaining_capacity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bms_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yhs_can_msgs::bms_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yhs_can_msgs::bms_fb_<ContainerAllocator>& v)
  {
    s << indent << "bms_fb_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.bms_fb_voltage);
    s << indent << "bms_fb_current: ";
    Printer<float>::stream(s, indent + "  ", v.bms_fb_current);
    s << indent << "bms_fb_remaining_capacity: ";
    Printer<float>::stream(s, indent + "  ", v.bms_fb_remaining_capacity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YHS_CAN_MSGS_MESSAGE_BMS_FB_H
