// Generated by gencpp from file yhs_can_msgs/front_angle_fb.msg
// DO NOT EDIT!


#ifndef YHS_CAN_MSGS_MESSAGE_FRONT_ANGLE_FB_H
#define YHS_CAN_MSGS_MESSAGE_FRONT_ANGLE_FB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yhs_can_msgs
{
template <class ContainerAllocator>
struct front_angle_fb_
{
  typedef front_angle_fb_<ContainerAllocator> Type;

  front_angle_fb_()
    : front_angle_fb_l(0.0)
    , front_angle_fb_r(0.0)  {
    }
  front_angle_fb_(const ContainerAllocator& _alloc)
    : front_angle_fb_l(0.0)
    , front_angle_fb_r(0.0)  {
  (void)_alloc;
    }



   typedef float _front_angle_fb_l_type;
  _front_angle_fb_l_type front_angle_fb_l;

   typedef float _front_angle_fb_r_type;
  _front_angle_fb_r_type front_angle_fb_r;





  typedef boost::shared_ptr< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> const> ConstPtr;

}; // struct front_angle_fb_

typedef ::yhs_can_msgs::front_angle_fb_<std::allocator<void> > front_angle_fb;

typedef boost::shared_ptr< ::yhs_can_msgs::front_angle_fb > front_angle_fbPtr;
typedef boost::shared_ptr< ::yhs_can_msgs::front_angle_fb const> front_angle_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator2> & rhs)
{
  return lhs.front_angle_fb_l == rhs.front_angle_fb_l &&
    lhs.front_angle_fb_r == rhs.front_angle_fb_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yhs_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d682109cd37a69f95f75010fef867d75";
  }

  static const char* value(const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd682109cd37a69f9ULL;
  static const uint64_t static_value2 = 0x5f75010fef867d75ULL;
};

template<class ContainerAllocator>
struct DataType< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yhs_can_msgs/front_angle_fb";
  }

  static const char* value(const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32  front_angle_fb_l\n"
"float32  front_angle_fb_r\n"
;
  }

  static const char* value(const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front_angle_fb_l);
      stream.next(m.front_angle_fb_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct front_angle_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yhs_can_msgs::front_angle_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yhs_can_msgs::front_angle_fb_<ContainerAllocator>& v)
  {
    s << indent << "front_angle_fb_l: ";
    Printer<float>::stream(s, indent + "  ", v.front_angle_fb_l);
    s << indent << "front_angle_fb_r: ";
    Printer<float>::stream(s, indent + "  ", v.front_angle_fb_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YHS_CAN_MSGS_MESSAGE_FRONT_ANGLE_FB_H
