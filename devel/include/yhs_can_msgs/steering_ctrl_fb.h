// Generated by gencpp from file yhs_can_msgs/steering_ctrl_fb.msg
// DO NOT EDIT!


#ifndef YHS_CAN_MSGS_MESSAGE_STEERING_CTRL_FB_H
#define YHS_CAN_MSGS_MESSAGE_STEERING_CTRL_FB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yhs_can_msgs
{
template <class ContainerAllocator>
struct steering_ctrl_fb_
{
  typedef steering_ctrl_fb_<ContainerAllocator> Type;

  steering_ctrl_fb_()
    : steering_ctrl_fb_gear(0)
    , steering_ctrl_fb_velocity(0.0)
    , steering_ctrl_fb_steering(0.0)
    , steering_ctrl_fb_slipangle(0.0)  {
    }
  steering_ctrl_fb_(const ContainerAllocator& _alloc)
    : steering_ctrl_fb_gear(0)
    , steering_ctrl_fb_velocity(0.0)
    , steering_ctrl_fb_steering(0.0)
    , steering_ctrl_fb_slipangle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _steering_ctrl_fb_gear_type;
  _steering_ctrl_fb_gear_type steering_ctrl_fb_gear;

   typedef float _steering_ctrl_fb_velocity_type;
  _steering_ctrl_fb_velocity_type steering_ctrl_fb_velocity;

   typedef float _steering_ctrl_fb_steering_type;
  _steering_ctrl_fb_steering_type steering_ctrl_fb_steering;

   typedef float _steering_ctrl_fb_slipangle_type;
  _steering_ctrl_fb_slipangle_type steering_ctrl_fb_slipangle;





  typedef boost::shared_ptr< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> const> ConstPtr;

}; // struct steering_ctrl_fb_

typedef ::yhs_can_msgs::steering_ctrl_fb_<std::allocator<void> > steering_ctrl_fb;

typedef boost::shared_ptr< ::yhs_can_msgs::steering_ctrl_fb > steering_ctrl_fbPtr;
typedef boost::shared_ptr< ::yhs_can_msgs::steering_ctrl_fb const> steering_ctrl_fbConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator2> & rhs)
{
  return lhs.steering_ctrl_fb_gear == rhs.steering_ctrl_fb_gear &&
    lhs.steering_ctrl_fb_velocity == rhs.steering_ctrl_fb_velocity &&
    lhs.steering_ctrl_fb_steering == rhs.steering_ctrl_fb_steering &&
    lhs.steering_ctrl_fb_slipangle == rhs.steering_ctrl_fb_slipangle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator1> & lhs, const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yhs_can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3bc753fb67cc67d81c6d81164cc1f21";
  }

  static const char* value(const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3bc753fb67cc67dULL;
  static const uint64_t static_value2 = 0x81c6d81164cc1f21ULL;
};

template<class ContainerAllocator>
struct DataType< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yhs_can_msgs/steering_ctrl_fb";
  }

  static const char* value(const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8    steering_ctrl_fb_gear\n"
"float32  steering_ctrl_fb_velocity\n"
"float32  steering_ctrl_fb_steering\n"
"float32  steering_ctrl_fb_slipangle\n"
;
  }

  static const char* value(const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering_ctrl_fb_gear);
      stream.next(m.steering_ctrl_fb_velocity);
      stream.next(m.steering_ctrl_fb_steering);
      stream.next(m.steering_ctrl_fb_slipangle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct steering_ctrl_fb_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yhs_can_msgs::steering_ctrl_fb_<ContainerAllocator>& v)
  {
    s << indent << "steering_ctrl_fb_gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_ctrl_fb_gear);
    s << indent << "steering_ctrl_fb_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.steering_ctrl_fb_velocity);
    s << indent << "steering_ctrl_fb_steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering_ctrl_fb_steering);
    s << indent << "steering_ctrl_fb_slipangle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_ctrl_fb_slipangle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YHS_CAN_MSGS_MESSAGE_STEERING_CTRL_FB_H
