# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yhs_can_msgs/bms_flag_fb.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bms_flag_fb(genpy.Message):
  _md5sum = "0eca005b4236cdc33bec1ff0de5c3a0b"
  _type = "yhs_can_msgs/bms_flag_fb"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 bms_flag_fb_soc
bool bms_flag_fb_single_ov
bool bms_flag_fb_single_uv
bool bms_flag_fb_ov
bool bms_flag_fb_uv
bool bms_flag_fb_charge_ot
bool bms_flag_fb_charge_ut
bool bms_flag_fb_discharge_ot
bool bms_flag_fb_discharge_ut
bool bms_flag_fb_charge_oc
bool bms_flag_fb_discharge_oc
bool bms_flag_fb_short
bool bms_flag_fb_ic_error
bool bms_flag_fb_lock_mos
bool bms_flag_fb_charge_flag
float32 bms_flag_fb_hight_temperature
float32 bms_flag_fb_low_temperature
"""
  __slots__ = ['bms_flag_fb_soc','bms_flag_fb_single_ov','bms_flag_fb_single_uv','bms_flag_fb_ov','bms_flag_fb_uv','bms_flag_fb_charge_ot','bms_flag_fb_charge_ut','bms_flag_fb_discharge_ot','bms_flag_fb_discharge_ut','bms_flag_fb_charge_oc','bms_flag_fb_discharge_oc','bms_flag_fb_short','bms_flag_fb_ic_error','bms_flag_fb_lock_mos','bms_flag_fb_charge_flag','bms_flag_fb_hight_temperature','bms_flag_fb_low_temperature']
  _slot_types = ['uint8','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bms_flag_fb_soc,bms_flag_fb_single_ov,bms_flag_fb_single_uv,bms_flag_fb_ov,bms_flag_fb_uv,bms_flag_fb_charge_ot,bms_flag_fb_charge_ut,bms_flag_fb_discharge_ot,bms_flag_fb_discharge_ut,bms_flag_fb_charge_oc,bms_flag_fb_discharge_oc,bms_flag_fb_short,bms_flag_fb_ic_error,bms_flag_fb_lock_mos,bms_flag_fb_charge_flag,bms_flag_fb_hight_temperature,bms_flag_fb_low_temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bms_flag_fb, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bms_flag_fb_soc is None:
        self.bms_flag_fb_soc = 0
      if self.bms_flag_fb_single_ov is None:
        self.bms_flag_fb_single_ov = False
      if self.bms_flag_fb_single_uv is None:
        self.bms_flag_fb_single_uv = False
      if self.bms_flag_fb_ov is None:
        self.bms_flag_fb_ov = False
      if self.bms_flag_fb_uv is None:
        self.bms_flag_fb_uv = False
      if self.bms_flag_fb_charge_ot is None:
        self.bms_flag_fb_charge_ot = False
      if self.bms_flag_fb_charge_ut is None:
        self.bms_flag_fb_charge_ut = False
      if self.bms_flag_fb_discharge_ot is None:
        self.bms_flag_fb_discharge_ot = False
      if self.bms_flag_fb_discharge_ut is None:
        self.bms_flag_fb_discharge_ut = False
      if self.bms_flag_fb_charge_oc is None:
        self.bms_flag_fb_charge_oc = False
      if self.bms_flag_fb_discharge_oc is None:
        self.bms_flag_fb_discharge_oc = False
      if self.bms_flag_fb_short is None:
        self.bms_flag_fb_short = False
      if self.bms_flag_fb_ic_error is None:
        self.bms_flag_fb_ic_error = False
      if self.bms_flag_fb_lock_mos is None:
        self.bms_flag_fb_lock_mos = False
      if self.bms_flag_fb_charge_flag is None:
        self.bms_flag_fb_charge_flag = False
      if self.bms_flag_fb_hight_temperature is None:
        self.bms_flag_fb_hight_temperature = 0.
      if self.bms_flag_fb_low_temperature is None:
        self.bms_flag_fb_low_temperature = 0.
    else:
      self.bms_flag_fb_soc = 0
      self.bms_flag_fb_single_ov = False
      self.bms_flag_fb_single_uv = False
      self.bms_flag_fb_ov = False
      self.bms_flag_fb_uv = False
      self.bms_flag_fb_charge_ot = False
      self.bms_flag_fb_charge_ut = False
      self.bms_flag_fb_discharge_ot = False
      self.bms_flag_fb_discharge_ut = False
      self.bms_flag_fb_charge_oc = False
      self.bms_flag_fb_discharge_oc = False
      self.bms_flag_fb_short = False
      self.bms_flag_fb_ic_error = False
      self.bms_flag_fb_lock_mos = False
      self.bms_flag_fb_charge_flag = False
      self.bms_flag_fb_hight_temperature = 0.
      self.bms_flag_fb_low_temperature = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15B2f().pack(_x.bms_flag_fb_soc, _x.bms_flag_fb_single_ov, _x.bms_flag_fb_single_uv, _x.bms_flag_fb_ov, _x.bms_flag_fb_uv, _x.bms_flag_fb_charge_ot, _x.bms_flag_fb_charge_ut, _x.bms_flag_fb_discharge_ot, _x.bms_flag_fb_discharge_ut, _x.bms_flag_fb_charge_oc, _x.bms_flag_fb_discharge_oc, _x.bms_flag_fb_short, _x.bms_flag_fb_ic_error, _x.bms_flag_fb_lock_mos, _x.bms_flag_fb_charge_flag, _x.bms_flag_fb_hight_temperature, _x.bms_flag_fb_low_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.bms_flag_fb_soc, _x.bms_flag_fb_single_ov, _x.bms_flag_fb_single_uv, _x.bms_flag_fb_ov, _x.bms_flag_fb_uv, _x.bms_flag_fb_charge_ot, _x.bms_flag_fb_charge_ut, _x.bms_flag_fb_discharge_ot, _x.bms_flag_fb_discharge_ut, _x.bms_flag_fb_charge_oc, _x.bms_flag_fb_discharge_oc, _x.bms_flag_fb_short, _x.bms_flag_fb_ic_error, _x.bms_flag_fb_lock_mos, _x.bms_flag_fb_charge_flag, _x.bms_flag_fb_hight_temperature, _x.bms_flag_fb_low_temperature,) = _get_struct_15B2f().unpack(str[start:end])
      self.bms_flag_fb_single_ov = bool(self.bms_flag_fb_single_ov)
      self.bms_flag_fb_single_uv = bool(self.bms_flag_fb_single_uv)
      self.bms_flag_fb_ov = bool(self.bms_flag_fb_ov)
      self.bms_flag_fb_uv = bool(self.bms_flag_fb_uv)
      self.bms_flag_fb_charge_ot = bool(self.bms_flag_fb_charge_ot)
      self.bms_flag_fb_charge_ut = bool(self.bms_flag_fb_charge_ut)
      self.bms_flag_fb_discharge_ot = bool(self.bms_flag_fb_discharge_ot)
      self.bms_flag_fb_discharge_ut = bool(self.bms_flag_fb_discharge_ut)
      self.bms_flag_fb_charge_oc = bool(self.bms_flag_fb_charge_oc)
      self.bms_flag_fb_discharge_oc = bool(self.bms_flag_fb_discharge_oc)
      self.bms_flag_fb_short = bool(self.bms_flag_fb_short)
      self.bms_flag_fb_ic_error = bool(self.bms_flag_fb_ic_error)
      self.bms_flag_fb_lock_mos = bool(self.bms_flag_fb_lock_mos)
      self.bms_flag_fb_charge_flag = bool(self.bms_flag_fb_charge_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15B2f().pack(_x.bms_flag_fb_soc, _x.bms_flag_fb_single_ov, _x.bms_flag_fb_single_uv, _x.bms_flag_fb_ov, _x.bms_flag_fb_uv, _x.bms_flag_fb_charge_ot, _x.bms_flag_fb_charge_ut, _x.bms_flag_fb_discharge_ot, _x.bms_flag_fb_discharge_ut, _x.bms_flag_fb_charge_oc, _x.bms_flag_fb_discharge_oc, _x.bms_flag_fb_short, _x.bms_flag_fb_ic_error, _x.bms_flag_fb_lock_mos, _x.bms_flag_fb_charge_flag, _x.bms_flag_fb_hight_temperature, _x.bms_flag_fb_low_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.bms_flag_fb_soc, _x.bms_flag_fb_single_ov, _x.bms_flag_fb_single_uv, _x.bms_flag_fb_ov, _x.bms_flag_fb_uv, _x.bms_flag_fb_charge_ot, _x.bms_flag_fb_charge_ut, _x.bms_flag_fb_discharge_ot, _x.bms_flag_fb_discharge_ut, _x.bms_flag_fb_charge_oc, _x.bms_flag_fb_discharge_oc, _x.bms_flag_fb_short, _x.bms_flag_fb_ic_error, _x.bms_flag_fb_lock_mos, _x.bms_flag_fb_charge_flag, _x.bms_flag_fb_hight_temperature, _x.bms_flag_fb_low_temperature,) = _get_struct_15B2f().unpack(str[start:end])
      self.bms_flag_fb_single_ov = bool(self.bms_flag_fb_single_ov)
      self.bms_flag_fb_single_uv = bool(self.bms_flag_fb_single_uv)
      self.bms_flag_fb_ov = bool(self.bms_flag_fb_ov)
      self.bms_flag_fb_uv = bool(self.bms_flag_fb_uv)
      self.bms_flag_fb_charge_ot = bool(self.bms_flag_fb_charge_ot)
      self.bms_flag_fb_charge_ut = bool(self.bms_flag_fb_charge_ut)
      self.bms_flag_fb_discharge_ot = bool(self.bms_flag_fb_discharge_ot)
      self.bms_flag_fb_discharge_ut = bool(self.bms_flag_fb_discharge_ut)
      self.bms_flag_fb_charge_oc = bool(self.bms_flag_fb_charge_oc)
      self.bms_flag_fb_discharge_oc = bool(self.bms_flag_fb_discharge_oc)
      self.bms_flag_fb_short = bool(self.bms_flag_fb_short)
      self.bms_flag_fb_ic_error = bool(self.bms_flag_fb_ic_error)
      self.bms_flag_fb_lock_mos = bool(self.bms_flag_fb_lock_mos)
      self.bms_flag_fb_charge_flag = bool(self.bms_flag_fb_charge_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15B2f = None
def _get_struct_15B2f():
    global _struct_15B2f
    if _struct_15B2f is None:
        _struct_15B2f = struct.Struct("<15B2f")
    return _struct_15B2f
