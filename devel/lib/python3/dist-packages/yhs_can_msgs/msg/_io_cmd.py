# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yhs_can_msgs/io_cmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class io_cmd(genpy.Message):
  _md5sum = "fff005dafb7015ce36adc67decd872a7"
  _type = "yhs_can_msgs/io_cmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool	 io_cmd_lamp_ctrl
bool	 io_cmd_unlock
bool     io_cmd_lower_beam_headlamp
bool     io_cmd_upper_beam_headlamp     
uint8	 io_cmd_turn_lamp
bool     io_cmd_braking_lamp
bool     io_cmd_clearance_lamp
bool     io_cmd_fog_lamp
bool	 io_cmd_speaker
"""
  __slots__ = ['io_cmd_lamp_ctrl','io_cmd_unlock','io_cmd_lower_beam_headlamp','io_cmd_upper_beam_headlamp','io_cmd_turn_lamp','io_cmd_braking_lamp','io_cmd_clearance_lamp','io_cmd_fog_lamp','io_cmd_speaker']
  _slot_types = ['bool','bool','bool','bool','uint8','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       io_cmd_lamp_ctrl,io_cmd_unlock,io_cmd_lower_beam_headlamp,io_cmd_upper_beam_headlamp,io_cmd_turn_lamp,io_cmd_braking_lamp,io_cmd_clearance_lamp,io_cmd_fog_lamp,io_cmd_speaker

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(io_cmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.io_cmd_lamp_ctrl is None:
        self.io_cmd_lamp_ctrl = False
      if self.io_cmd_unlock is None:
        self.io_cmd_unlock = False
      if self.io_cmd_lower_beam_headlamp is None:
        self.io_cmd_lower_beam_headlamp = False
      if self.io_cmd_upper_beam_headlamp is None:
        self.io_cmd_upper_beam_headlamp = False
      if self.io_cmd_turn_lamp is None:
        self.io_cmd_turn_lamp = 0
      if self.io_cmd_braking_lamp is None:
        self.io_cmd_braking_lamp = False
      if self.io_cmd_clearance_lamp is None:
        self.io_cmd_clearance_lamp = False
      if self.io_cmd_fog_lamp is None:
        self.io_cmd_fog_lamp = False
      if self.io_cmd_speaker is None:
        self.io_cmd_speaker = False
    else:
      self.io_cmd_lamp_ctrl = False
      self.io_cmd_unlock = False
      self.io_cmd_lower_beam_headlamp = False
      self.io_cmd_upper_beam_headlamp = False
      self.io_cmd_turn_lamp = 0
      self.io_cmd_braking_lamp = False
      self.io_cmd_clearance_lamp = False
      self.io_cmd_fog_lamp = False
      self.io_cmd_speaker = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.io_cmd_lamp_ctrl, _x.io_cmd_unlock, _x.io_cmd_lower_beam_headlamp, _x.io_cmd_upper_beam_headlamp, _x.io_cmd_turn_lamp, _x.io_cmd_braking_lamp, _x.io_cmd_clearance_lamp, _x.io_cmd_fog_lamp, _x.io_cmd_speaker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.io_cmd_lamp_ctrl, _x.io_cmd_unlock, _x.io_cmd_lower_beam_headlamp, _x.io_cmd_upper_beam_headlamp, _x.io_cmd_turn_lamp, _x.io_cmd_braking_lamp, _x.io_cmd_clearance_lamp, _x.io_cmd_fog_lamp, _x.io_cmd_speaker,) = _get_struct_9B().unpack(str[start:end])
      self.io_cmd_lamp_ctrl = bool(self.io_cmd_lamp_ctrl)
      self.io_cmd_unlock = bool(self.io_cmd_unlock)
      self.io_cmd_lower_beam_headlamp = bool(self.io_cmd_lower_beam_headlamp)
      self.io_cmd_upper_beam_headlamp = bool(self.io_cmd_upper_beam_headlamp)
      self.io_cmd_braking_lamp = bool(self.io_cmd_braking_lamp)
      self.io_cmd_clearance_lamp = bool(self.io_cmd_clearance_lamp)
      self.io_cmd_fog_lamp = bool(self.io_cmd_fog_lamp)
      self.io_cmd_speaker = bool(self.io_cmd_speaker)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.io_cmd_lamp_ctrl, _x.io_cmd_unlock, _x.io_cmd_lower_beam_headlamp, _x.io_cmd_upper_beam_headlamp, _x.io_cmd_turn_lamp, _x.io_cmd_braking_lamp, _x.io_cmd_clearance_lamp, _x.io_cmd_fog_lamp, _x.io_cmd_speaker))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.io_cmd_lamp_ctrl, _x.io_cmd_unlock, _x.io_cmd_lower_beam_headlamp, _x.io_cmd_upper_beam_headlamp, _x.io_cmd_turn_lamp, _x.io_cmd_braking_lamp, _x.io_cmd_clearance_lamp, _x.io_cmd_fog_lamp, _x.io_cmd_speaker,) = _get_struct_9B().unpack(str[start:end])
      self.io_cmd_lamp_ctrl = bool(self.io_cmd_lamp_ctrl)
      self.io_cmd_unlock = bool(self.io_cmd_unlock)
      self.io_cmd_lower_beam_headlamp = bool(self.io_cmd_lower_beam_headlamp)
      self.io_cmd_upper_beam_headlamp = bool(self.io_cmd_upper_beam_headlamp)
      self.io_cmd_braking_lamp = bool(self.io_cmd_braking_lamp)
      self.io_cmd_clearance_lamp = bool(self.io_cmd_clearance_lamp)
      self.io_cmd_fog_lamp = bool(self.io_cmd_fog_lamp)
      self.io_cmd_speaker = bool(self.io_cmd_speaker)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
